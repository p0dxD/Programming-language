
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftNOTleftLESSTHANLESSTHANEQUALEQUALNOTEQUALGREATERTHANGREATERTHANEQUALleftINleftPLUSMINUSleftFLOORDIVISIONleftEXPONENTleftMODULOleftTIMESDIVIDEINTEGER REAL STRING LPAREN RPAREN LBRACKET RBRACKET TIMES DIVIDE MODULO EXPONENT FLOORDIVISION PLUS MINUS LESSTHAN LESSTHANEQUAL EQUAL NOTEQUAL GREATERTHAN GREATERTHANEQUAL COMMA SEMICOLON RCURLY LCURLY ASSIGMENT ID IN OR NOT AND PRINT IF ELSE WHILE RETURNprogram : functions blockprogram : blockfunctions : functions functionfunctions : functionfunction : ID LPAREN IDlist RPAREN blockfunction : ID LPAREN RPAREN blockblock : LCURLY statements RCURLYblock : LCURLY RCURLYstatements : statement statementsstatements : statementstatement : printsmt\n    \t\t\t\t| ifstatement\n    \t\t\t\t| whilestatement\n    \t\t\t\t| elsestatement\n    \t\t\t\t| block\n    \t\t\t\t| returnstatementstatement : expression ASSIGMENT expression SEMICOLONreturnstatement : RETURN expression SEMICOLONbodystatement : statementprintsmt : PRINT LPAREN expression RPAREN SEMICOLONwhilestatement : WHILE LPAREN expression RPAREN bodystatementifstatement : IF LPAREN expression RPAREN bodystatementelsestatement : ifstatement ELSE bodystatementexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression FLOORDIVISION expression\n                  | expression EXPONENT expression\n                  | expression MODULO expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : expression LESSTHAN expression\n                  | expression LESSTHANEQUAL expression\n                  | expression EQUAL expression\n                  | expression NOTEQUAL expression\n                  | expression GREATERTHAN expression\n                  | expression GREATERTHANEQUAL expressionexpression : expression OR expression\n\t\t\t\t| expression AND expression\n\t\t\t\t| expression IN expressionexpression : NOT expressionexpression : PLUS expressionindex : list bracketindex : STRING bracketindex : ID bracketindex : expression bracketindex : indicesindices : index bracketbracket : LBRACKET expression RBRACKETlist : LBRACKET RBRACKETlist : bracketlist : LBRACKET commalist RBRACKETcommalist : expressioncommalist : commalist COMMA expressionexpressionlist : expressionlist COMMA expressionexpressionlist : expressionIDlist : IDlist COMMA IDIDlist : IDexpression : factorfactor : LPAREN expression RPARENfunExp : ID LPAREN expressionlist RPARENfunExp : ID LPAREN RPARENfactor : INTEGER\n                  | REAL\n                  | STRING\n                  | ID \n                  | list\n                  | index\n                  | funExp'
    
_lr_action_items = {'LCURLY':([0,2,4,5,8,10,11,12,13,14,15,16,17,38,40,77,78,79,102,109,111,112,114,115,119,121,122,123,],[5,5,-4,5,-3,-8,5,-11,-12,-13,-14,-15,-16,-7,5,5,-23,-19,-18,5,-6,-17,5,5,-5,-20,-22,-21,]),'ID':([0,2,4,5,8,10,11,12,13,14,15,16,17,20,23,24,25,34,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,62,63,69,78,79,102,107,110,111,112,114,115,117,119,121,122,123,],[6,6,-4,30,-3,-8,30,-11,-12,-13,-14,-15,-16,30,30,30,30,30,75,-7,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-23,-19,-18,30,120,-6,-17,30,30,30,-5,-20,-22,-21,]),'$end':([1,3,7,10,38,],[0,-2,-1,-8,-7,]),'RCURLY':([5,9,10,11,12,13,14,15,16,17,38,39,78,79,102,112,121,122,123,],[10,38,-8,-10,-11,-12,-13,-14,-15,-16,-7,-9,-23,-19,-18,-17,-20,-22,-21,]),'PRINT':([5,10,11,12,13,14,15,16,17,38,40,78,79,102,112,114,115,121,122,123,],[19,-8,19,-11,-12,-13,-14,-15,-16,-7,19,-23,-19,-18,-17,19,19,-20,-22,-21,]),'IF':([5,10,11,12,13,14,15,16,17,38,40,78,79,102,112,114,115,121,122,123,],[21,-8,21,-11,-12,-13,-14,-15,-16,-7,21,-23,-19,-18,-17,21,21,-20,-22,-21,]),'WHILE':([5,10,11,12,13,14,15,16,17,38,40,78,79,102,112,114,115,121,122,123,],[22,-8,22,-11,-12,-13,-14,-15,-16,-7,22,-23,-19,-18,-17,22,22,-20,-22,-21,]),'RETURN':([5,10,11,12,13,14,15,16,17,38,40,78,79,102,112,114,115,121,122,123,],[23,-8,23,-11,-12,-13,-14,-15,-16,-7,23,-23,-19,-18,-17,23,23,-20,-22,-21,]),'NOT':([5,10,11,12,13,14,15,16,17,20,23,24,25,34,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,62,63,69,78,79,102,107,112,114,115,117,121,122,123,],[25,-8,25,-11,-12,-13,-14,-15,-16,25,25,25,25,25,-7,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-23,-19,-18,25,-17,25,25,25,-20,-22,-21,]),'PLUS':([5,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,112,114,115,116,117,118,121,122,123,124,],[24,-8,24,-11,-12,-13,-14,-15,-16,42,24,24,24,24,-58,-62,-63,-64,-65,-66,-67,-68,24,-50,-46,-7,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-45,24,24,42,24,24,42,-41,42,-43,-44,24,-42,-47,-49,42,-23,-19,42,-24,-25,-26,-27,-28,-29,-30,42,42,42,42,42,42,42,42,42,42,42,-59,42,42,-18,-61,42,-51,24,-48,-17,24,24,-60,24,42,-20,-22,-21,42,]),'LPAREN':([5,6,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,30,34,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,62,63,69,78,79,102,107,112,114,115,117,121,122,123,],[20,37,-8,20,-11,-12,-13,-14,-15,-16,60,20,62,63,20,20,20,69,20,-7,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-23,-19,-18,20,-17,20,20,20,-20,-22,-21,]),'INTEGER':([5,10,11,12,13,14,15,16,17,20,23,24,25,34,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,62,63,69,78,79,102,107,112,114,115,117,121,122,123,],[27,-8,27,-11,-12,-13,-14,-15,-16,27,27,27,27,27,-7,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-23,-19,-18,27,-17,27,27,27,-20,-22,-21,]),'REAL':([5,10,11,12,13,14,15,16,17,20,23,24,25,34,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,62,63,69,78,79,102,107,112,114,115,117,121,122,123,],[28,-8,28,-11,-12,-13,-14,-15,-16,28,28,28,28,28,-7,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-23,-19,-18,28,-17,28,28,28,-20,-22,-21,]),'STRING':([5,10,11,12,13,14,15,16,17,20,23,24,25,34,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,62,63,69,78,79,102,107,112,114,115,117,121,122,123,],[29,-8,29,-11,-12,-13,-14,-15,-16,29,29,29,29,29,-7,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-23,-19,-18,29,-17,29,29,29,-20,-22,-21,]),'LBRACKET':([5,10,11,12,13,14,15,16,17,18,20,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,112,114,115,116,117,118,121,122,123,124,],[34,-8,34,-11,-12,-13,-14,-15,-16,59,34,34,34,34,-58,-62,-63,59,59,59,59,-68,34,-50,-46,-7,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-45,34,34,59,34,34,59,-41,-40,-43,-44,34,-42,-47,-49,59,-23,-19,59,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,59,59,-59,59,59,-18,-61,59,-51,34,-48,-17,34,34,-60,34,59,-20,-22,-21,59,]),'ELSE':([10,12,13,14,15,16,17,38,78,79,102,112,121,122,123,],[-8,-11,40,-13,-14,-15,-16,-7,-23,-19,-18,-17,-20,-22,-21,]),'ASSIGMENT':([18,26,27,28,29,30,31,32,33,35,36,58,65,66,67,68,70,71,72,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,99,104,106,108,116,],[41,-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,-45,-41,-40,-43,-44,-42,-47,-49,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-59,-61,-51,-48,-60,]),'MINUS':([18,26,27,28,29,30,31,32,33,35,36,58,61,64,65,66,67,68,70,71,72,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,104,105,106,108,116,118,124,],[43,-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,-45,43,43,-41,43,-43,-44,-42,-47,-49,43,43,-24,-25,-26,-27,-28,-29,-30,43,43,43,43,43,43,43,43,43,43,43,-59,43,43,-61,43,-51,-48,-60,43,43,]),'FLOORDIVISION':([18,26,27,28,29,30,31,32,33,35,36,58,61,64,65,66,67,68,70,71,72,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,104,105,106,108,116,118,124,],[44,-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,-45,44,44,44,44,-43,-44,-42,-47,-49,44,44,44,44,-26,-27,-28,-29,-30,44,44,44,44,44,44,44,44,44,44,44,-59,44,44,-61,44,-51,-48,-60,44,44,]),'EXPONENT':([18,26,27,28,29,30,31,32,33,35,36,58,61,64,65,66,67,68,70,71,72,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,104,105,106,108,116,118,124,],[45,-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,-45,45,45,45,45,-43,-44,-42,-47,-49,45,45,45,45,45,-27,-28,-29,-30,45,45,45,45,45,45,45,45,45,45,45,-59,45,45,-61,45,-51,-48,-60,45,45,]),'MODULO':([18,26,27,28,29,30,31,32,33,35,36,58,61,64,65,66,67,68,70,71,72,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,104,105,106,108,116,118,124,],[46,-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,-45,46,46,46,46,-43,-44,-42,-47,-49,46,46,46,46,46,46,-28,-29,-30,46,46,46,46,46,46,46,46,46,46,46,-59,46,46,-61,46,-51,-48,-60,46,46,]),'TIMES':([18,26,27,28,29,30,31,32,33,35,36,58,61,64,65,66,67,68,70,71,72,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,104,105,106,108,116,118,124,],[47,-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,-45,47,47,47,47,-43,-44,-42,-47,-49,47,47,47,47,47,47,47,-29,-30,47,47,47,47,47,47,47,47,47,47,47,-59,47,47,-61,47,-51,-48,-60,47,47,]),'DIVIDE':([18,26,27,28,29,30,31,32,33,35,36,58,61,64,65,66,67,68,70,71,72,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,104,105,106,108,116,118,124,],[48,-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,-45,48,48,48,48,-43,-44,-42,-47,-49,48,48,48,48,48,48,48,-29,-30,48,48,48,48,48,48,48,48,48,48,48,-59,48,48,-61,48,-51,-48,-60,48,48,]),'LESSTHAN':([18,26,27,28,29,30,31,32,33,35,36,58,61,64,65,66,67,68,70,71,72,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,104,105,106,108,116,118,124,],[49,-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,-45,49,49,-41,49,-43,-44,-42,-47,-49,49,49,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,49,49,-39,49,49,-59,49,49,-61,49,-51,-48,-60,49,49,]),'LESSTHANEQUAL':([18,26,27,28,29,30,31,32,33,35,36,58,61,64,65,66,67,68,70,71,72,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,104,105,106,108,116,118,124,],[50,-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,-45,50,50,-41,50,-43,-44,-42,-47,-49,50,50,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,50,50,-39,50,50,-59,50,50,-61,50,-51,-48,-60,50,50,]),'EQUAL':([18,26,27,28,29,30,31,32,33,35,36,58,61,64,65,66,67,68,70,71,72,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,104,105,106,108,116,118,124,],[51,-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,-45,51,51,-41,51,-43,-44,-42,-47,-49,51,51,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,51,51,-39,51,51,-59,51,51,-61,51,-51,-48,-60,51,51,]),'NOTEQUAL':([18,26,27,28,29,30,31,32,33,35,36,58,61,64,65,66,67,68,70,71,72,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,104,105,106,108,116,118,124,],[52,-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,-45,52,52,-41,52,-43,-44,-42,-47,-49,52,52,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,52,52,-39,52,52,-59,52,52,-61,52,-51,-48,-60,52,52,]),'GREATERTHAN':([18,26,27,28,29,30,31,32,33,35,36,58,61,64,65,66,67,68,70,71,72,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,104,105,106,108,116,118,124,],[53,-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,-45,53,53,-41,53,-43,-44,-42,-47,-49,53,53,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,53,53,-39,53,53,-59,53,53,-61,53,-51,-48,-60,53,53,]),'GREATERTHANEQUAL':([18,26,27,28,29,30,31,32,33,35,36,58,61,64,65,66,67,68,70,71,72,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,104,105,106,108,116,118,124,],[54,-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,-45,54,54,-41,54,-43,-44,-42,-47,-49,54,54,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,54,54,-39,54,54,-59,54,54,-61,54,-51,-48,-60,54,54,]),'OR':([18,26,27,28,29,30,31,32,33,35,36,58,61,64,65,66,67,68,70,71,72,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,104,105,106,108,116,118,124,],[55,-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,-45,55,55,-41,-40,-43,-44,-42,-47,-49,55,55,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,55,55,-59,55,55,-61,55,-51,-48,-60,55,55,]),'AND':([18,26,27,28,29,30,31,32,33,35,36,58,61,64,65,66,67,68,70,71,72,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,104,105,106,108,116,118,124,],[56,-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,-45,56,56,-41,-40,-43,-44,-42,-47,-49,56,56,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,56,-38,-39,56,56,-59,56,56,-61,56,-51,-48,-60,56,56,]),'IN':([18,26,27,28,29,30,31,32,33,35,36,58,61,64,65,66,67,68,70,71,72,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,104,105,106,108,116,118,124,],[57,-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,-45,57,57,-41,57,-43,-44,-42,-47,-49,57,57,-24,-25,-26,-27,-28,-29,-30,57,57,57,57,57,57,57,57,-39,57,57,-59,57,57,-61,57,-51,-48,-60,57,57,]),'RPAREN':([26,27,28,29,30,31,32,33,35,36,37,58,61,65,66,67,68,69,70,71,72,75,76,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,103,104,105,106,108,116,120,124,],[-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,77,-45,99,-41,-40,-43,-44,104,-42,-47,-49,-57,109,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,113,-59,114,115,116,-61,-55,-51,-48,-60,-56,-54,]),'SEMICOLON':([26,27,28,29,30,31,32,33,35,36,58,64,65,66,67,68,70,71,72,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,99,104,106,108,113,116,],[-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,-45,102,-41,-40,-43,-44,-42,-47,-49,112,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-59,-61,-51,-48,121,-60,]),'RBRACKET':([26,27,28,29,30,31,32,33,34,35,36,58,65,66,67,68,70,71,72,73,74,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,104,106,108,116,118,],[-58,-62,-63,-64,-65,-66,-67,-68,72,-50,-46,-45,-41,-40,-43,-44,-42,-47,-49,106,108,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,108,-59,-61,-51,-48,-60,-53,]),'COMMA':([26,27,28,29,30,31,32,33,35,36,58,65,66,67,68,70,71,72,73,74,75,76,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,99,103,104,105,106,108,116,118,120,124,],[-58,-62,-63,-64,-65,-66,-67,-68,-50,-46,-45,-41,-40,-43,-44,-42,-47,-49,107,-52,-57,110,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-59,117,-61,-55,-51,-48,-60,-53,-56,-54,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'functions':([0,],[2,]),'block':([0,2,5,11,40,77,109,114,115,],[3,7,16,16,16,111,119,16,16,]),'function':([0,2,],[4,8,]),'statements':([5,11,],[9,39,]),'statement':([5,11,40,114,115,],[11,11,79,79,79,]),'printsmt':([5,11,40,114,115,],[12,12,12,12,12,]),'ifstatement':([5,11,40,114,115,],[13,13,13,13,13,]),'whilestatement':([5,11,40,114,115,],[14,14,14,14,14,]),'elsestatement':([5,11,40,114,115,],[15,15,15,15,15,]),'returnstatement':([5,11,40,114,115,],[17,17,17,17,17,]),'expression':([5,11,20,23,24,25,34,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,62,63,69,107,114,115,117,],[18,18,61,64,65,66,74,18,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,100,101,105,118,18,18,124,]),'factor':([5,11,20,23,24,25,34,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,62,63,69,107,114,115,117,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'list':([5,11,20,23,24,25,34,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,62,63,69,107,114,115,117,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'index':([5,11,20,23,24,25,34,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,62,63,69,107,114,115,117,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'funExp':([5,11,20,23,24,25,34,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,62,63,69,107,114,115,117,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'bracket':([5,11,18,20,23,24,25,29,30,31,32,34,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,69,74,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,100,101,105,107,114,115,117,118,124,],[35,35,58,35,35,35,35,67,68,70,71,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,58,35,35,58,58,58,35,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,35,35,35,35,58,58,]),'indices':([5,11,20,23,24,25,34,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,62,63,69,107,114,115,117,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'commalist':([34,],[73,]),'IDlist':([37,],[76,]),'bodystatement':([40,114,115,],[78,122,123,]),'expressionlist':([69,],[103,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> functions block','program',2,'p_program_func','stonyBrookScript.py',516),
  ('program -> block','program',1,'p_program_block','stonyBrookScript.py',520),
  ('functions -> functions function','functions',2,'p_functions','stonyBrookScript.py',524),
  ('functions -> function','functions',1,'p_functions_function','stonyBrookScript.py',528),
  ('function -> ID LPAREN IDlist RPAREN block','function',5,'p_functions_one','stonyBrookScript.py',532),
  ('function -> ID LPAREN RPAREN block','function',4,'p_functions_noargs','stonyBrookScript.py',537),
  ('block -> LCURLY statements RCURLY','block',3,'p_block','stonyBrookScript.py',542),
  ('block -> LCURLY RCURLY','block',2,'p_block_empty','stonyBrookScript.py',546),
  ('statements -> statement statements','statements',2,'p_statements_more','stonyBrookScript.py',551),
  ('statements -> statement','statements',1,'p_statements_one','stonyBrookScript.py',555),
  ('statement -> printsmt','statement',1,'p_statement_expr','stonyBrookScript.py',559),
  ('statement -> ifstatement','statement',1,'p_statement_expr','stonyBrookScript.py',560),
  ('statement -> whilestatement','statement',1,'p_statement_expr','stonyBrookScript.py',561),
  ('statement -> elsestatement','statement',1,'p_statement_expr','stonyBrookScript.py',562),
  ('statement -> block','statement',1,'p_statement_expr','stonyBrookScript.py',563),
  ('statement -> returnstatement','statement',1,'p_statement_expr','stonyBrookScript.py',564),
  ('statement -> expression ASSIGMENT expression SEMICOLON','statement',4,'p_statement_assign','stonyBrookScript.py',568),
  ('returnstatement -> RETURN expression SEMICOLON','returnstatement',3,'p_statement_return','stonyBrookScript.py',572),
  ('bodystatement -> statement','bodystatement',1,'p_bodystatement_onestatement','stonyBrookScript.py',576),
  ('printsmt -> PRINT LPAREN expression RPAREN SEMICOLON','printsmt',5,'p_printsmt_smt','stonyBrookScript.py',580),
  ('whilestatement -> WHILE LPAREN expression RPAREN bodystatement','whilestatement',5,'p_whilestatement_while','stonyBrookScript.py',584),
  ('ifstatement -> IF LPAREN expression RPAREN bodystatement','ifstatement',5,'p_ifstatement_if','stonyBrookScript.py',589),
  ('elsestatement -> ifstatement ELSE bodystatement','elsestatement',3,'p_elsestatement_ifelse','stonyBrookScript.py',594),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','stonyBrookScript.py',600),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','stonyBrookScript.py',601),
  ('expression -> expression FLOORDIVISION expression','expression',3,'p_expression_binop','stonyBrookScript.py',602),
  ('expression -> expression EXPONENT expression','expression',3,'p_expression_binop','stonyBrookScript.py',603),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binop','stonyBrookScript.py',604),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','stonyBrookScript.py',605),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','stonyBrookScript.py',606),
  ('expression -> expression LESSTHAN expression','expression',3,'p_expression_conditional','stonyBrookScript.py',610),
  ('expression -> expression LESSTHANEQUAL expression','expression',3,'p_expression_conditional','stonyBrookScript.py',611),
  ('expression -> expression EQUAL expression','expression',3,'p_expression_conditional','stonyBrookScript.py',612),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_conditional','stonyBrookScript.py',613),
  ('expression -> expression GREATERTHAN expression','expression',3,'p_expression_conditional','stonyBrookScript.py',614),
  ('expression -> expression GREATERTHANEQUAL expression','expression',3,'p_expression_conditional','stonyBrookScript.py',615),
  ('expression -> expression OR expression','expression',3,'p_expression_booleans','stonyBrookScript.py',619),
  ('expression -> expression AND expression','expression',3,'p_expression_booleans','stonyBrookScript.py',620),
  ('expression -> expression IN expression','expression',3,'p_expression_booleans','stonyBrookScript.py',621),
  ('expression -> NOT expression','expression',2,'p_expression_not','stonyBrookScript.py',625),
  ('expression -> PLUS expression','expression',2,'p_expression_plusnum','stonyBrookScript.py',629),
  ('index -> list bracket','index',2,'p_index_list','stonyBrookScript.py',634),
  ('index -> STRING bracket','index',2,'p_index_string','stonyBrookScript.py',638),
  ('index -> ID bracket','index',2,'p_index_id','stonyBrookScript.py',642),
  ('index -> expression bracket','index',2,'p_index_expression','stonyBrookScript.py',646),
  ('index -> indices','index',1,'p_index_indeces','stonyBrookScript.py',650),
  ('indices -> index bracket','indices',2,'p_indices_indices','stonyBrookScript.py',654),
  ('bracket -> LBRACKET expression RBRACKET','bracket',3,'p_bracket','stonyBrookScript.py',658),
  ('list -> LBRACKET RBRACKET','list',2,'p_list_empty','stonyBrookScript.py',663),
  ('list -> bracket','list',1,'p_list_expr','stonyBrookScript.py',667),
  ('list -> LBRACKET commalist RBRACKET','list',3,'p_list_bracket','stonyBrookScript.py',671),
  ('commalist -> expression','commalist',1,'p_commalist_list','stonyBrookScript.py',675),
  ('commalist -> commalist COMMA expression','commalist',3,'p_commalist_recursive','stonyBrookScript.py',679),
  ('expressionlist -> expressionlist COMMA expression','expressionlist',3,'p_expressionslist','stonyBrookScript.py',684),
  ('expressionlist -> expression','expressionlist',1,'p_expressionslist_expression','stonyBrookScript.py',688),
  ('IDlist -> IDlist COMMA ID','IDlist',3,'p_idlist','stonyBrookScript.py',692),
  ('IDlist -> ID','IDlist',1,'p_idlist_id','stonyBrookScript.py',696),
  ('expression -> factor','expression',1,'p_expression_factor','stonyBrookScript.py',701),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_paren','stonyBrookScript.py',705),
  ('funExp -> ID LPAREN expressionlist RPAREN','funExp',4,'p_funExp','stonyBrookScript.py',709),
  ('funExp -> ID LPAREN RPAREN','funExp',3,'p_funExp_emptyargs','stonyBrookScript.py',714),
  ('factor -> INTEGER','factor',1,'p_factor_type','stonyBrookScript.py',719),
  ('factor -> REAL','factor',1,'p_factor_type','stonyBrookScript.py',720),
  ('factor -> STRING','factor',1,'p_factor_type','stonyBrookScript.py',721),
  ('factor -> ID','factor',1,'p_factor_type','stonyBrookScript.py',722),
  ('factor -> list','factor',1,'p_factor_type','stonyBrookScript.py',723),
  ('factor -> index','factor',1,'p_factor_type','stonyBrookScript.py',724),
  ('factor -> funExp','factor',1,'p_factor_type','stonyBrookScript.py',725),
]
